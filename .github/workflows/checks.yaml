name: checks

permissions:
  contents: read

on:
  push:
    branches:
      - 'release/**'
  pull_request:
    branches-ignore:
      - 'release/**'
  schedule:
    - cron: '0 4 * * *'
  merge_group:
    types: [checks_requested]
  workflow_call: {}

jobs:
  build:
    name: Build and test
    runs-on: "${{ matrix.os }}"
    env:
      SQLX_OFFLINE: "true"
    strategy:
      matrix:
        include:
          - rust: stable
            os: ubuntu-latest
            target: "x86_64-unknown-linux-gnu"
          - rust: beta
            os: ubuntu-latest
            target: "x86_64-unknown-linux-gnu"
          - rust: "msrv"
            os: ubuntu-latest
            target: "x86_64-unknown-linux-gnu"
          - rust: "stable"
            os: ubuntu-latest
            target: "x86_64-unknown-linux-musl"
          - rust: "stable"
            os: macos-latest
            target: "aarch64-apple-darwin"
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          persist-credentials: false
      - name: Set target rust version
        run: echo "TARGET_RUST_VERSION=$(if [ "${{matrix.rust}}" = "msrv" ]; then grep rust-version Cargo.toml | grep MSRV | cut -d'"' -f2; else echo "${{matrix.rust}}"; fi)" >> $GITHUB_ENV
      - name: Install nightly toolchain for direct-minimal-versions
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: nightly
          targets: "${{ matrix.target }}"
        if: ${{ matrix.rust == 'msrv' }}
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: "${TARGET_RUST_VERSION}"
          targets: "${{ matrix.target }}"
      - name: Downgrade direct dependencies to minimal versions
        run: cargo +nightly update -Z direct-minimal-versions
        if: ${{ matrix.rust == 'msrv' }}
      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@0123528f956f923e7a476f4cc04882bc005e7c89
        with:
          target: ${{ matrix.target }}
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@aa2649f25ee7099207734772f5393fd30167cb73
        with:
          tool: cargo-llvm-cov
      - name: Rust cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0
        with:
            shared-key: "${{matrix.rust}}-${{matrix.target}}"
      - name: cargo build
        run: cargo build
      - name: cargo test
        run: cargo llvm-cov --target ${{matrix.target}} --lcov --output-path lcov.info
        env:
          RUST_BACKTRACE: 1
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: test, ${{ matrix.target }}, ${{ matrix.rust }}
          fail_ci_if_error: false

  unused:
    name: Check unused dependencies
    env:
      SQLX_OFFLINE: "true"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          persist-credentials: false
      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: nightly
      - name: Install udeps
        uses: taiki-e/install-action@aa2649f25ee7099207734772f5393fd30167cb73
        with:
          tool: cargo-udeps
      - name: cargo udeps
        run: cargo udeps --workspace --all-targets

  format:
    name: Format
    env:
      SQLX_OFFLINE: "true"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          persist-credentials: false
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: stable
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all --check

  clippy:
    name: Clippy
    env:
      SQLX_OFFLINE: "true"
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runs_on: ubuntu-latest
          - target: armv7-unknown-linux-gnueabihf
            runs_on: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            runs_on: ubuntu-latest
          - target: aarch64-apple-darwin
            runs_on: macos-latest
    runs-on: ${{matrix.runs_on}}
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          persist-credentials: false
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: stable
          components: clippy
          targets: ${{matrix.target}}

      - name: Setup tools for cross compilation
        uses: awalsh128/cache-apt-pkgs-action@4c82c3ccdc1344ee11e9775dbdbdf43aa8a5614e # v1.5.1
        with:
          packages: musl-tools qemu-user-static crossbuild-essential-armhf crossbuild-essential-arm64 crossbuild-essential-i386
          version: 1
        if: ${{matrix.runs_on == 'ubuntu-latest'}}

      - name: Install bindgen-cli
        uses: taiki-e/install-action@aa2649f25ee7099207734772f5393fd30167cb73
        with:
          tool: bindgen-cli
        if: ${{matrix.runs_on == 'ubuntu-latest'}}

      - name: Rust cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0
        with:
            shared-key: "stable-${{matrix.target}}"

      - name: Run clippy
        run: cargo clippy --target ${{matrix.target}} --all-targets

  audit-dependencies:
    name: Audit dependencies
    env:
      SQLX_OFFLINE: "true"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
    - uses: EmbarkStudios/cargo-deny-action@30f817c6f72275c6d54dc744fbca09ebc958599f
      with:
        arguments: --workspace --all-features

  fuzz-code-coverage:
    name: Fuzz with code coverage
    env:
      SQLX_OFFLINE: "true"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - fuzz_target: client_request
            corpus: ""
            features: ''
          - fuzz_target: key_exchange_response
            corpus: ""
            features: ''
          - fuzz_target: record
            corpus: ""
            features: ''
          - fuzz_target: server_information_response
            corpus: ""
            features: ''
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          persist-credentials: false
      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@be73d7920c329f220ce78e0234b8f96b7ae60248
        with:
          toolchain: nightly
          components: llvm-tools-preview
      - name: Install cargo fuzz & rustfilt
        uses: taiki-e/install-action@aa2649f25ee7099207734772f5393fd30167cb73
        with:
          tool: cargo-fuzz,rustfilt
      - name: Run `cargo fuzz`
        env:
          RUST_BACKTRACE: "1"
          # prevents `cargo fuzz coverage` from rebuilding everything
          RUSTFLAGS: "-C instrument-coverage"
        run: |
          cargo fuzz run --target $(rustc --print host-tuple) ${{matrix.features}} ${{matrix.fuzz_target}} ${{matrix.corpus}} -- -max_total_time=10
      - name: Fuzz codecov
        run: |
          cargo fuzz coverage --target $(rustc --print host-tuple) ${{matrix.features}} ${{matrix.fuzz_target}} ${{matrix.corpus}}
          $(rustc --print sysroot)/lib/rustlib/$(rustc --print host-tuple)/bin/llvm-cov export -Xdemangler=rustfilt \
              target/x86_64-unknown-linux-musl/coverage/$(rustc --print host-tuple)/release/${{matrix.fuzz_target}} \
              -instr-profile=fuzz/coverage/${{matrix.fuzz_target}}/coverage.profdata \
              --format=lcov \
              -ignore-filename-regex="\.cargo|\.rustup" > lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24
        with:
          files: ./lcov.info
          fail_ci_if_error: false
          flags: fuzz, fuzz-${{ matrix.fuzz_target }}
          token: ${{ secrets.CODECOV_TOKEN }}
          name: fuzz
